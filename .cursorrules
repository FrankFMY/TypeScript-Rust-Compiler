# Cursor Rules for TypeScript-Rust-Compiler

## 🎯 Project Goals
This is a TypeScript to Rust compiler project with the following goals:
- Complete TypeScript feature support
- High-performance compilation
- Idiomatic Rust code generation
- Full type safety preservation

## 🚀 Development Priorities
1. **Speed** - Compilation should be lightning-fast
2. **Completeness** - Support 100% of TypeScript features
3. **Performance** - Generated Rust code should be optimal
4. **Compatibility** - Full backward compatibility with existing TS projects

## 🏗️ Architecture
```
typescript-rust-compiler/
├── src/
│   ├── lexer/          # Lexical analysis
│   ├── parser/         # Syntax analysis
│   ├── ast/            # AST structures
│   ├── semantic/       # Semantic analysis
│   ├── types/          # Type system
│   ├── generator/      # Code generation
│   ├── runtime/        # Runtime support
│   └── cli/           # CLI interface
├── tests/              # Test suite
├── examples/          # Example projects
└── docs/              # Documentation
```

## 🔧 Technical Stack
- **Language**: Rust (latest stable)
- **Parsing**: nom (parser combinators)
- **Generation**: quote + syn
- **CLI**: clap
- **Testing**: cargo test
- **Documentation**: rustdoc

## 📋 Development Rules

### Code Style
- Follow rustfmt standards
- Document every public function with rustdoc
- Use thiserror for structured errors
- Profile and optimize critical paths
- Minimize unsafe code

### Testing
- Minimum 90% test coverage
- Integration tests for each TS feature
- Benchmarks for compiler performance
- Regression tests against real TS projects

### Commits
- Use conventional commits
- English commit messages
- Atomic commits, one feature at a time

### Performance
- Compilation: < 1 second for 10k LOC
- Memory: < 100MB for large projects
- Generated code: Optimal Rust without unnecessary allocations

## 🎯 Key Features to Support

### Basic Types
- number → i32/i64/f32/f64
- string → String/&str
- boolean → bool
- null/undefined → Option<T>
- any → Box<dyn Any>
- unknown → Box<dyn Any>
- never → !
- void → ()

### Objects and Classes
- interfaces → traits + structs
- classes → structs + impl blocks
- inheritance → trait bounds
- abstract classes → trait definitions

### Generics
- <T> → <T>
- extends → trait bounds
- keyof → associated types
- typeof → type inference

### Modules
- import/export → use/mod
- namespace → mod
- ambient declarations → extern

### Async
- async/await → async/await
- Promise<T> → Future<Output = T>
- Promise.all → join!/try_join!

### Advanced Types
- Union types → enums
- Intersection types → trait bounds
- Conditional types → associated types
- Mapped types → generic implementations
- Template literals → const generics

## 🚫 Limitations and Warnings

### Do Not
- Simplify functionality for speed
- Ignore edge cases
- Break TypeScript semantics
- Generate unsafe Rust code
- Create runtime without necessity

### Note
- Some TS features may require runtime
- GC semantics may require Rc/Arc
- Dynamic typing may require trait objects
- Some optimizations may be impossible

## 📊 Success Metrics
- **Compilation Speed**: < 1s for 10k LOC
- **TS Feature Coverage**: 100%
- **Generated Code Performance**: >= original TS
- **Compatibility**: 100% with existing projects
- **Stability**: 0 critical bugs

## 🔄 Development Approach
1. **MVP**: Basic types + functions (1-2 weeks)
2. **Expansion**: Classes + interfaces (1-2 weeks)
3. **Advanced**: Generics + modules (1-2 weeks)
4. **Finalization**: Optimization + testing (1 week)

## 🎯 Final Goal
Create a compiler that:
- Compiles any TypeScript code to Rust
- Generates idiomatic and performant Rust code
- Preserves all TypeScript semantics and functionality
- Works faster than existing solutions
- Supports all modern TS features

**Implementation Time: 4-6 weeks**
**Quality Standard: Production-ready**